#!/bin/bash
if [ "$EUID" -ne 0 ]; then echo "Please run me as root"; exit ; fi
DRY=1 # Always dry unless flag '-run' is detected.


#     _                
#  __| | ___ _ __  ___ 
# / _` |/ _ \ '_ \/ __|
#| (_| |  __/ |_) \__ \
# \__,_|\___| .__/|___/
#           |_|        

for dependency in ip dhclient qemu-system-x86_64 brctl dhclient taskset chrt
do
  which $dependency >/dev/null 2>&1 || missing="$missing $dependency "
done
if [[ ! -z "$missing" ]]
then
  echo -ne "Couldn't find these programs:$missing\nPlease install the relevant packages or check your \$PATH."
  exit 1
fi

# _____                 _   _                 
#|  ___|   _ _ __   ___| |_(_) ___  _ __  ___ 
#| |_ | | | | '_ \ / __| __| |/ _ \| '_ \/ __|
#|  _|| |_| | | | | (__| |_| | (_) | | | \__ \
#|_|   \__,_|_| |_|\___|\__|_|\___/|_| |_|___/
# 

function printHelp {
  echo "This script is designed to make my single-gpu vfio mucking about easier."
  echo "It's gone over so many iterations the past few months, I it's useful to others."
  echo 
  echo "Valid example arguments:"
  echo
  echo "[REQUIRED]"
  echo "  -image /dev/zvol/zpool/windows,format=raw"
  echo "    A file or blockdevice to give the guest. Complete with it's [Qemu recognised] format"
  echo
  echo "[OPTIONAL]"
  echo "  -iso /path/to/a/diskimage.iso"
  echo "    If you're installing the OS for drivers you may wish to include this"
  echo
  echo "  -bridge br0,enp4s0,tap0"
  echo "    If not specified, the default qemu NAT adapter is used."
  echo
  echo "  -memory 8192M / -memory 8G"
  echo "    Default is half that of system total memory"
  echo
  echo "  -USB 'SteelSeries|Keyboard|Xbox|1234:5678'"
  echo "    A regex for lsusb parsing. Can be anything that matches a specific device line"
  echo
  echo "  -PCI 'Realtek|NVIDIA|10ec:8168'"
  echo "    A regex for lspci parsing. Example will take any nvidia and Realtek cards"
  echo
  echo "  -taskset 0,1,2,3,4,5,6 / -taskset 0,2,4,8"
  echo "    A comma delimited list of host threads the Guest is allowed to execute on."
  echo "    (Setting this also shapes the guest CPU topology to match.)"
  echo "    If you've configured core isolation on the host, this is the argument for you!"
  echo
  echo "Please see the README.md file for more information about the flags."
  exit 1
}

function do_cleanup {
    # Undo our bridge
  if [[ ! -z "$bridgeArgs" ]]; then bridger $bridgeArgs stop ; fi
  
  consoleDrivers bind

    # Make the console usable again if PCI was used.
  if [ ! -z "$pciREGEX" ] && [[ $pciREGEX == *"NVIDIA"* ]]
  then
    restoreHostDisplay NVIDIA 
  fi
}

function bridger {
    br=$1
   int=$2 ; intMAC=$(ip link show $int|grep -Po '(?<=ether\ )([a-f]|[0-9]|\:)+')
   tap=$3
  mode=$4


  if [ "$mode" == "start" ] && [ "$DRY" -eq "0" ]
  then
    if systemctl is-active NetworkManager >/dev/null ; then systemctl stop NetworkManager ; export nm="seen" ; fi
    ip addr flush dev $int # Remove any IPs from the real int
    if ! ip link show $br  >/dev/null 2>&1; then ip link add $br type bridge     ; fi
    if   ip link show $int >/dev/null 2>&1; then ip link set dev $int master $br ; ip link set dev $br address $intMAC ; fi
    if ! ip link show $tap >/dev/null 2>&1; then ip tuntap add $tap mode tap     ; ip link set $tap master $br ; fi
    for i in $br $int $tap; do ip link set $i up; done
    echo ------------------
    echo "New bridge details:"
    brctl show $br
    dhclient -v $br 2>&1|grep '^DHCP'
    echo ------------------
  elif [ "$mode" == "start" ] && [ "$DRY" -eq "1" ]
  then
    echo "[DRY] Bridge creation skipped"
  elif [ "$mode" == "stop" ] && [ "$DRY" -eq "0" ]
  then
    dhclient -r $br >/dev/null 2>&1 && echo "dhclient lease released and process ended."
    for i in $tap $br; do ip link set $i down ; ip link del $i; done
    if ! ip link show br0 >/dev/null 2>&1; then echo "Bridge is gone."; fi
    if [ "$nm" == "seen" ]; then systemctl restart NetworkManager ; fi && echo "NetworkManager is now back."
  fi
}

function consoleDrivers { # Toggles rendering to Ctrl+Alt+F[0-9]. Needs to be unhooked for GPU passthrough.
  if [ "$DRY" -eq "0" ]
  then 
    if [[ "$1" -eq 'bind' ]]; then bindstate='1';else bindstate='0';fi
    #echo $bindstate > /sys/class/vtconsole/vtcon0/bind
    #echo $bindstate > /sys/class/vtconsole/vtcon1/bind
    echo efi-framebuffer.0 > /sys/bus/platform/drivers/efi-framebuffer/$1
  fi
}

function enumerateUSBs { # This only makes arguments
  echo "USB:"
  lsusbOutput="$(lsusb)"
  usbArgs="-usb"
  USBDevices="$(grep -E "$usbREGEX" <<<"$lsusbOutput")"
  
  while read USBDevice
  do
     manufID="$( grep -Eo '(([0-9]|[a-f]){4}|:){3}' <<<$USBDevice| cut -d':' -f1)"
    deviceID="$( grep -Eo '(([0-9]|[a-f]){4}|:){3}' <<<$USBDevice| cut -d':' -f2)"
        Name="$(cut -d' ' -f7- <<<"$USBDevice")"
    if [[ ! -z "$manufID" ]] && [[ ! -z "$deviceID" ]]
    then
      newUsbArg="-device usb-host,vendorid=0x$manufID,productid=0x$deviceID"
        usbArgs="$usbArgs $newUsbArg"
      printf "  Found $manufID:$deviceID as  :\t'$Name'\n    Added to USB Args as:\t$newUsbArg\n\n"
    else
    printf "Skipping: '$USBDevice' as there was an issue finding it."
    fi
  done <<<"$USBDevices"
}

function enumeratePCIs { # This makes arguments and also unbinds from drivers. Optional vfio-pci rebinding.

  echo "PCI:"
  if ! lsmod|grep -q vfio_pci; then modprobe vfio-pci; fi
  if systemctl is-active display-manager >/dev/null && [ "$DRY" -eq "0" ]; then systemctl stop display-manager ; export dm="seen" ; fi
  consoleDrivers unbind  # Required to avoid GPU mmap issues

  lspciOutput="$(lspci -nn)"
  PCIDevices="$(grep -E "$pciREGEX" <<<"$lspciOutput")"
  inc=0
  while read PCIDevice
  do
    echo "  Found $PCIDevice"
    buspath="0000:$(cut -d' ' -f1<<<$PCIDevice)"

    if [[ $1 == *"unbind"* ]] && [ "$DRY" -eq "0" ]
    then
      echo "    Unbinding from it's driver" ; echo "$buspath" > /sys/bus/pci/devices/$buspath/driver/unbind
    elif [[ $1 == *"unbind"* ]] && [ "$DRY" -eq "1" ]
    then
      echo "    [DRY] Not unbinding it"
    fi

    if [[ $1 == *"vfiobind"* ]] && [ "$DRY" -eq "0" ]
    then
      vendor="$( grep -Eo '(([0-9]|[a-f]){4}|:){3}' <<<$PCIDevice| cut -d':' -f1)"
       class="$( grep -Eo '(([0-9]|[a-f]){4}|:){3}' <<<$PCIDevice| cut -d':' -f2)"
      echo "    Binding it to vfio-pci" ; echo "0x$vendor 0x$class" > /sys/bus/pci/drivers/vfio-pci/new_id
      if [[ $? -ne "0" ]]; then echo "Rebind to vfio-pci failed.."; fi
      echo 1 > /sys/bus/pci/rescan
    elif [[ $1 == *"vfiobind"* ]] && [ "$DRY" -eq "1" ]
    then
      echo "    [DRY] Not binding to vfio-pci"
    fi
    pciArgs="$pciArgs -device vfio-pci,host=$buspath,id=hostdev$inc"
    inc=$((($inc+1)))
  done <<<"$PCIDevices"
  
  if [[ $var == *"vfiobind"* ]] ; then echo -ne "Here are the completed pciArgs:\n    $pciArgs"; fi
}

function restoreHostDisplay {
  pciREGEX="$1" ; enumeratePCIs unbind

  echo "Attempting to rebind nvidia drivers..."
  list="nvidia_drm nvidia_modeset nvidia" #Some drivers we must reprobe on the host
  for module in $list; do rmmod $module; done
  for module in $list; do modprobe $module; done
  if  [ "$dm" == "seen" ]; then echo "Attempting to restart your display-manager..." ; systemctl start display-manager ; fi
}

#    _                  
#   / \   _ __ __ _ ___ 
#  / _ \ | '__/ _` / __|
# / ___ \| | | (_| \__ \
#/_/   \_\_|  \__, |___/
#             |___/     

if [[ -z "$@" ]] ; then echo "No args seen. Printing help" ; printHelp ; fi

while [ $# -gt 0 ]
do
  case "$1" in
    -bridge|-BRIDGE)
       bridgeArgs="$(sed 's/,/ /g' <<<$2)"
       shift
    ;;
     -memory|-MEMORY|-MEM|-mem)
       memoryArgs="$2"
       shift
    ;;
     -usb|-USB)
       usbREGEX="$2"
       shift
    ;;
     -pci|-PCI)
        pciREGEX="$2"
       shift
    ;;
     -run|-RUN)
       DRY="0"
       shift
    ;;
     -iso|-ISO)
        iso="$2"
        shift
    ;;
     -bios|-BIOS)
        biosPath="$2"
        shift
    ;;
     -taskset|-TASKSET)
        tasksetThreads="$2"
        taskset="chrt -r 1 taskset -c $tasksetThreads"
        shift
    ;;
     -image|-IMAGE)
        image="$2"
        shift
    ;;
     --help|-help|--HELP|-HELP)
        printHelp
    ;;
     *) /bin/echo "Unknown argument $1"
        printHelp
    ;;
    esac
    shift
done

# ____                 _____ _ _       _     _   
#|  _ \ _ __ ___      |  ___| (_) __ _| |__ | |_ 
#| |_) | '__/ _ \_____| |_  | | |/ _` | '_ \| __|
#|  __/| | |  __/_____|  _| | | | (_| | | | | |_ 
#|_|   |_|  \___|     |_|   |_|_|\__, |_| |_|\__|
#                                |___/

  # Set a trap to run the cleanup function.
trap do_cleanup  EXIT HUP INT TERM

if [ $DRY -eq "1" ]; then echo "This is a DRY run. Please specify -run to actually run" ; echo ; fi

  # Check for active IOMMU module.
if ! lsmod |grep -qi iommu; then echo -ne "IOMMU isn't loaded?\n  For an Intel machine you must add 'intel_iommu=on' to your kernel boot options in your bootloader.\n  If you're on an AMD machine instead add these two: 'iommu=pt iommu=1'\n\n  If you've already done this and rebooted, your host may not be compatible or some relevant bios settings could be disabled.\n  Feel free to ask about this in case it's a script fault.\n" ; exit 1; fi

  # Determine Host cpu cores/threads and what the guest gets based on -taskset (if specified).
hostThreads=$(grep -Pom1 'siblings.*\ \K([0-9]+)$' /proc/cpuinfo )
  hostCores=$(grep -Pom1 'cpu cores.*\ \K([0-9]+)$' /proc/cpuinfo)
  if [ "$((($hostCores * 2)))" == "$hostThreads" ]; then hostIsThreaded=1; fi

if [ -z "$taskset" ]
then
  guestCores=$hostCores ; if [ ! -z $hostIsThreaded ]; then guestThreads=2; else guestThreads=1; fi
  echo "-taskset not specified, using all host cores: ($hostCores) with ($hostThreads) threads."
else
  if grep -qE '^([0-9]|,)+$' <<< $tasksetThreads
  then
    echo "-taskset specified.. This run will limiting the guest to using host CPU threads: $tasksetThreads"
    OLDIFS="$IFS" ; IFS=, ; tasksetCount=$(echo $tasksetThreads| wc -w) ; IFS="$OLDIFS"
      # Check if specified -taskset thread count is divisible by 2. Use hyperthreading/smt if supported
    if (( $tasksetCount % 2 == 0 )) && [ "$hostIsThreaded" == "1" ] ; then guestCores=$((( $tasksetCount / 2 ))) ; guestThreads=2; else guestCores=$tasksetCount ; guestThreads=1 ; fi
  else
    echo "This script's -taskset flag only accepts comma delimited threads at the moment such as: 0,1,2,3,4,5,6, or 0,2,4,8 -- Sorry!"
  fi
fi

  # Determine guest memory
if [ -z "$memoryArgs" ]
then
  echo -ne "No -memory argument provided, will use half of host: "
  totalHostMemoryKB=$(grep -oPm1 '(?!=MemTotal\:(\ )+)[0-9]+' /proc/meminfo)
  if [ ! -z "$totalHostMemoryKB" ]
  then
    guestmemoryMB="$((($totalHostMemoryKB / 2)))K"
    echo -ne "$guestmemoryMB\n"
  else
    echo "Failed to find a default memory value for the guest."
  fi
else
  guestmemoryMB=$memoryArgs
fi

  # Make the bridge
if [[ ! -z "$bridgeArgs" ]]; then bridger $bridgeArgs start ; fi

  # Evaulate biosPath
if [[ -z "$biosPath" ]]
then
  defaultBiosPath="/usr/share/ovmf/x64/OVMF_CODE.fd"
  if [[ ! -f "$defaultBiosPath" ]]
  then
    echo "No -bios argument provided and couldn't find default '$defaultBiosPath'. Please install OVMF or set your .fd file with the -bios argument"
  else
    echo "No -bios argument provided, using discovered default: $defaultBiosPath"
    biosPath=$defaultBiosPath
  fi
fi

echo
# Put QEMU arguments together

  machineArgs="-machine q35,accel=kvm,kernel_irqchip=on" # kernel_irqchip helps prevent PCI Error Code 34 on GPUs.

  cpuArgs="-cpu host,kvm=off"
  smpArgs="-smp sockets=1,cores=$guestCores,threads=$guestThreads"
  coreArgs="$machineArgs -enable-kvm -m $guestmemoryMB $cpuArgs $smpArgs"
  coreArgs="$coreArgs -drive file=$image,id=disk"
  coreArgs="$coreArgs -bios $biosPath"
    if [ ! -z $iso  ]  ;then coreArgs="$coreArgs -cdrom $isoPath" ; fi
    if [[ ! -z "$usbREGEX" ]] && [[ ! -z "$pciREGEX" ]] ; then coreArgs="$coreArgs -nographic -vga none" ; fi # Create X11 window if no USB&PCI passthrough used.

networkArgs="-device virtio-net,netdev=network0"
if [[ ! -z "$bridgeArgs" ]];
then
  networkArgs="$networkArgs -netdev tap,id=network0,ifname=tap0,script=no,downscript=no" #BRIDGE
else
  networkArgs="$networkArgs -netdev user,id=network0" #NAT
fi

if [ ! -z "$usbREGEX" ]; then enumerateUSBs ; fi
if [ ! -z "$pciREGEX" ]; then enumeratePCIs unbind+vfiobind ; consoleDrivers unbind ; fi


if [ "$DRY" == "1" ];
then
  echo "---------------------"
  echo "Here are the completed args from this DRY run:"
  echo "Core: $coreArgs"
  echo "Net : $networkArgs"
  echo "USB : $usbArgs"
  echo "PCI : $pciArgs"
  if [ ! -z "$taskset" ]; then echo "Taskset parms: $taskset"; fi
  echo "Run the same command again but with '-run' to actually pass these to qemu-system-x86_64"
  exit 0
else
  $taskset qemu-system-x86_64 $coreArgs $networkArgs $usbArgs $pciArgs
fi

#  ____ _                              
# / ___| | ___  __ _ _ __  _   _ _ __  
#| |   | |/ _ \/ _` | '_ \| | | | '_ \ 
#| |___| |  __/ (_| | | | | |_| | |_) |
# \____|_|\___|\__,_|_| |_|\__,_| .__/ 
#                               |_|    

do_cleanup

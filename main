#!/bin/bash
DRY=1 # Assume dry, '-run' flag will flip the bit later.
echo "" # Professional padding

# Some colors
declare -A colors
colors[red]="\e[31m"
colors[green]="\e[32m"
colors[yellow]="\e[33m"
colors[blue]="\e[34m"
colors[magenta]="\e[35m"
colors[cyan]="\e[36m"
colors[lightgray]="\e[37m"
colors[white]="\e[97m"


#     _                
#  __| | ___ _ __  ___ 
# / _` |/ _ \ '_ \/ __|
#| (_| |  __/ |_) \__ \
# \__,_|\___| .__/|___/
#           |_|        

for dependency in ip dhclient qemu-system-x86_64 brctl dhclient taskset chrt
do
  which $dependency >/dev/null 2>&1 || missing="$missing $dependency "
done
if [[ ! -z "$missing" ]]
then
  echo -ne "Couldn't find these programs:$missing\nPlease install the relevant packages or check your \$PATH."
  exit 1
fi

# _____                 _   _                 
#|  ___|   _ _ __   ___| |_(_) ___  _ __  ___ 
#| |_ | | | | '_ \ / __| __| |/ _ \| '_ \/ __|
#|  _|| |_| | | | | (__| |_| | (_) | | | \__ \
#|_|   \__,_|_| |_|\___|\__|_|\___/|_| |_|___/
# 

function printHelp {
  echo "This script is designed to make my single-gpu vfio mucking about easier."
  echo "It's gone over so many iterations the past few months, I it's useful to others."
  echo 
  echo "Valid example arguments:"
  echo
  echo "[Required for most use-cases]"
  echo "  -image /dev/zvol/zpool/windows"
  echo "  -imageformat/-format raw/qcow/vdi/etc"
  echo "    A file or blockdevice to give the guest. Complete with it's [Qemu recognised] format"
  echo
  echo "[For first-install or liveCD booting]"
  echo "  -iso /path/to/a/diskimage.iso"
  echo "    If you're installing the OS for drivers you may wish to include this"
  echo
  echo -e "  -bridge br0,tap0\t(Attach vm's tap0 to existing br0)"
  echo -e "  -bridge br0,tap0,eth0\t(Create br0, attach vm's tap0 and host's eth0 to br0, use dhclient for a host IP.)"
  echo -e "    If not specified, the default qemu NAT adapter is used."
  echo
  echo "  -memory 8192M / -memory 8G / -mem xxxxM"
  echo "    Set VM memory (Default is half of system total memory)"
  echo
  echo "  -hugepages / -huge"
  echo "    Try to mount & allocate hugepages for qemu with the -mem specified."
  echo "    (May want to specify -mem for this. Half of host ram may be too much.)"
  echo
  echo "  -USB 'SteelSeries|Keyboard|Xbox|1234:5678'"
  echo "    A regex for lsusb parsing. Can be anything that matches a specific device line"
  echo
  echo "  -PCI 'Realtek|NVIDIA|10ec:8168'"
  echo "    A regex for lspci parsing. Example will take any nvidia and Realtek cards"
  echo
  echo "  -taskset 0,1,2,3,4,5,6 / -taskset 0,2,4,8"
  echo "    A comma delimited list of host threads the Guest is allowed to execute on."
  echo "    (Setting this also shapes the guest CPU topology to match.)"
  echo "    If you've configured core isolation on the host, this is the argument for you!"
  echo
  echo "Please see the README.md file for more information about the flags."
  exit 1
}

function isDry {
if [ $DRY -eq 1 ] ; then return 0 ; else return 1 ; fi
}

function do_cleanup {
  # Try to undo any mess we've caused

  echo -ne "${colors[white]}"
  if ! isDry
  then
      # Undo bridge if used
    if [[ ! -z "$bridgeArgs" ]]; then bridger stop $bridgeArgs ; fi
    
  
      # Rebind the console and PCI devices if they were rebound
    if [ ! -z "$pciREGEX" ]
    then
      if [ ! -z "$consoleUnbound" ]; then consoleDrivers bind; fi # var only checked for zero length
      enumeratePCIs restorebind
      if  [ "$dm" == "seen" ]; then echo "Attempting to restore display-manager..." ; systemctl start display-manager ; fi # Start DM if seen before run.
    fi

    if [ "$HUGEPAGES" == "1" ] # Clean up hugepages
    then
      echo 0 > /proc/sys/vm/nr_hugepages # pack up
      if [ "$hugeMount" == "self" ]; then umount $hugePath ; fi #umount if we mounted it
    fi
  fi
  echo -e "\n${colors[green]}Cleanup complete.${colors[white]}"
}

function regexCleanup {
  if [ -z "$@" ] ; then echo "No argument given to regexCleanup" ; return ; fi
  REGEX="$@"
  if grep -qE '^\|' <<< $1; then REGEX=${REGEX#?} ; fi
  if grep -qE '\|$' <<< $1; then REGEX=${REGEX%?} ; fi
  echo $REGEX
}

function bridger {
  # Goal is to attach the vm's tap interface to a bridge. Creates the bridge if missing and attaches host int.
  mode=$1
    br=$2
   tap=$3
   int=$4 ; intMAC=$(ip link show $int|grep -Po '(?<=ether\ )([a-f]|[0-9]|\:)+')


  if [ "$mode" == "start" ] && ! isDry
  then
    if [ ! -z "$int" ]
    then
      if ! ip link show $int >/dev/null 2>&1; then echo "$int defined but not found, not bridging." ; return 1 ; else intExists=1 ; fi
    else
      echo "host int not specified, will attach VM tap to existing bridge"
      intExists=0
    fi
    if ip link show $tap >/dev/null 2>&1 ; then echo "$$tap already exists (use another name), not bridging." ; return 1 ; fi
    if grep -qs -E '^up$' /sys/class/net/$br/operstate
    then
      echo "$br exists and is up, will attach $tap to that."
      bridgePreexists=1
    else
      echo "$br not found, will create for this VM run session"
      bridgePreexists=0
    fi

    if [ $bridgePreexists -eq 0 ]
    then
      if systemctl is-active NetworkManager >/dev/null ; then systemctl stop NetworkManager ; export nm="seen" ; fi
        # Create the bridge,        bring it up.
      ip link add $br type bridge ; ip link set $br up
        # Remove IPs from int,  attach int to bridge,              give bridge int's mac,                bring int up.
      if [ $intExists = 1 ] ; then ip addr flush dev $int && ip link set dev $int master $br && ip link set dev $br address $intMAC ; ip link set $int up ; fi
    fi

      # Always create the tap,     attach tap to bridge,          bring tap up.
    ip tuntap add $tap mode tap && ip link set $tap master $br && ip link set $tap up
    echo '------------------'
    echo -ne "Bridge details:\n\n" ; brctl show $br ; echo
    if [ $bridgePreexists -eq 0 ]; then echo "Running dhclient on $br..." ; dhclient -v $br 2>&1|grep '^DHCPACK' ; else echo -e "${colors[green]}Bridge already existed, not running dhclient -r on it.${colors[white]}" ; fi
    echo '------------------'
  elif [ "$mode" == "start" ] && isDry
  then
    echo -e "${colors[green]}[DRY] acknowledged -bridge${colors[white]}"
  elif [ "$mode" == "stop" ] && ! isDry
  then
    if [ $bridgePreexists -eq 0 ]
    then
      echo -e "${colors[yellow]}Cleaning up our bridge..."
      dhclient -r $br >/dev/null 2>&1 && echo -e "${colors[green]}dhcp lease released and dhclient process ended...${colors[white]}"
      for i in $tap $br; do ip link set $i down ; ip link del $i; done # Remove the tap and bridge
      if ! ip link show br0 >/dev/null 2>&1; then echo -e "${colors[green]}Bridge removed.${colors[white]}"; fi
    else
      echo -e "${colors[green]}We only attached $tap to an existing bridge this run, removing $tap."
      for i in $tap ; do ip link set $i down ; ip link del $i; done && echo -e "${colors[green]}$tap removed.${colors[white]}" # Remove the tap
    fi
    if [ "$nm" == "seen" ]; then systemctl restart NetworkManager ; echo -e "${colors[green]}NetworkManager restarted.${colors[white]}" ; fi
  fi
}

function consoleDrivers { # Toggles rendering to Ctrl+Alt+F[0-9]. Needs to be unhooked for GPU passthrough.
  if ! isDry
  then 
    if [[ "$1" -eq 'bind' ]]; then bindBoolean="1"; bindState="$1" ; else bindBoolean="0" ; bindState="unbind" ; fi
    for vtconsole in /sys/class/vtconsole/*; do echo $bindBoolean > $vtconsole/bind ; done
    echo efi-framebuffer.0 > /sys/bus/platform/drivers/efi-framebuffer/$bindState
    consoleUnbound=1
  fi
}

function enumerateUSBs { # This only makes arguments
  echo "USB:"
  lsusbOutput="$(lsusb)"
  usbArgs="-usb"
  USBDevices="$(grep -E "$usbREGEX" <<<"$lsusbOutput")"
  
  while read USBDevice
  do
     vendorProduct="$( grep -Eo '(([0-9]|[a-f]){4}|:){3}' <<<$USBDevice)"
     vendor="$( cut -d':' -f1 <<<"$vendorProduct")"
    product="$( cut -d':' -f2 <<<"$vendorProduct")"
        Name="$(cut -d' ' -f7- <<<"$USBDevice")"
    if [[ ! -z "$vendor" ]] && [[ ! -z "$product" ]]
    then
      newUsbArg="-device usb-host,vendorid=0x$vendor,productid=0x$product"
        usbArgs="$usbArgs $newUsbArg"
      echo -e "  Matched: ${colors[blue]}$vendor:$product '$Name'${colors[white]}"
      echo -e "${colors[green]}    Added to USB Args as:\t$newUsbArg\n${colors[white]}"
    else
      echo -e "${colors[red]}Skipping: '$USBDevice' as there was an issue finding it.\n"
    fi
  done <<<"$USBDevices"
}

function enumeratePCIs { # This makes arguments and also unbinds from drivers. Optional vfio-pci rebinding.
  function gpuDetectedAndInUse {
    echo -e "${colors[yellow]}Video device $1 appears to be in use by the host (Display-manager, efi-framebuffer[virtual consoles] or otherwise).${colors[white]}"
    echo -e "${colors[yellow]}At the current time I'll need to stop your display manager to continue.${colors[white]}"
    echo -e "${colors[yellow]}If you don't think the host is using this [RIGHT NOW] then there may be an error.${colors[white]}"
    if systemctl is-active display-manager >/dev/null && ! isDry
    then
      echo -e "${colors[yellow]}Stopping display-manager and unbinding console drivers in 5 seconds...${colors[white]}" ; sleep 5
      systemctl stop display-manager ; export dm="seen"
    else
      echo -e "${colors[yellow]}Could not find a service for display-manager.${colors[white]}"
    fi
    consoleDrivers unbind && echo -e "${colors[yellow]} Console drivers unbound, host may be headless"
  }

  echo "PCI:"
  declare -A -g deviceDrivers # Our cool array
  if ! lsmod|grep -q vfio_pci; then modprobe vfio-pci; fi
  if [ "$?" -ne "0" ]; then echo "Could not modprove vfio-pci. Please fix this."; exit 1 ; fi

  lspciOutput="$(lspci -nn)"
  if [ -z "$pciREGEX" ]; then echo "pciREGEX variable is empty. Not sure how I was called? Panicing."; exit 1; fi 
  PCIDevices="$(grep -E "$pciREGEX" <<<"$lspciOutput")"
  if [ -z "$PCIDevices" ]; then echo "Couldn't find any PCI devices with regex '$pciREGEX', please try another one. Panicing."; exit 1; fi 
  inc=0
  while read PCIDevice
  do
    echo -e "  Matched: ${colors[blue]}$PCIDevice"
    shortBuspath="$(cut -d' ' -f1<<<$PCIDevice)"
    buspath="0000:$shortBuspath"

    vendorClass="$( grep -Eo '(([0-9]|[a-f]){4}|:){3}' <<<$PCIDevice )"
    vendor="$( cut -d':' -f1 <<<"$vendorClass")"
     class="$( cut -d':' -f2 <<<"$vendorClass")"

    if ! [[ $@ == *"restorebind"* ]]
    then
      currentDriver="$(lspci -nn -k -s "$buspath" | grep -oP '(?<=driver in use:\ ).*')"
      if ! [ -z "$currentDriver" ]
      then
        deviceDrivers["$vendorClass"]="$currentDriver" # Add it to our cool array
        driver="${deviceDrivers["$vendorClass"]}"
        echo -e "    ${colors[green]}[INFO] Detected driver '$driver' is using this device. It will be re-bound on VM exit.${colors[white]}"
      fi
    fi
      driver="${deviceDrivers["$vendorClass"]}"

    if [[ $@ == *"unbind"* ]] && ! isDry
    then
      if ! isDry && grep -o '\[VGA controller\]' <<<$(lspci -vnnn -s "$buspath") ; then gpuDetectedAndInUse "$busPath[$vendorClass]" ; fi
      echo -e "${colors[green]}    Unbinding from:\t${colors[white]}$driver" ; echo "$buspath" > /sys/bus/pci/devices/$buspath/driver/unbind
    elif [[ $@ == *"unbind"* ]] && isDry
    then
      echo -e "    ${colors[green]}[DRY]  Not unbinding it.${colors[white]}"
    fi

    if [[ $@ == *"vfiobind"* ]] && ! isDry
    then
      echo -e "${colors[green]}    Binding to:\t\t${colors[white]}vfio-pci" ; echo "0x$vendor 0x$class" > /sys/bus/pci/drivers/vfio-pci/new_id
      if [ $? -ne 0 ]; then echo -e "    ${colors[red]}Rebind to vfio-pci failed!"; fi
      echo 1 > /sys/bus/pci/rescan
    elif [[ $@ == *"vfiobind"* ]] && isDry
    then
      echo -e "    ${colors[green]}[DRY]  Not binding to:\t${colors[white]}vfio-pci"
      echo
    elif [[ $@ == *"restorebind"* ]] && ! isDry
    then
      if ! [ -z "$driver" ]
      then
        echo -e "${colors[green]}    Rebinding $vendorClass to driver:\t${colors[white]}$driver"
	echo "$buspath" > /sys/bus/pci/devices/$buspath/driver/unbind
	echo "$buspath" > /sys/bus/pci/drivers/$driver/bind
	if [ "$?" -eq "0" ]; then echo -e "${colors[green]}    Successfully rebound to:\t\t${colors[white]}$driver" ; else echo -e "${colors[red]}    Was unable to rebind it to $driver."; fi
      fi
    fi


    pciArgs="$pciArgs -device vfio-pci,host=$buspath,id=hostdev$inc"
    inc=$((($inc+1)))
  done <<<"$PCIDevices"
  
  if [[ $var == *"vfiobind"* ]] ; then echo -ne "Here are the completed pciArgs:\n    $pciArgs"; fi
}

#    _                  
#   / \   _ __ __ _ ___ 
#  / _ \ | '__/ _` / __|
# / ___ \| | | (_| \__ \
#/_/   \_\_|  \__, |___/
#             |___/     

if [[ -z "$@" ]] ; then echo "No args seen. Printing help" ; printHelp ; fi

while [ $# -gt 0 ]
do
  case "$1" in
    -colortest|-colourtest)
       echo "Ok, doing a color test then exiting..."
       for i in $(sort <<< ${!colors[@]}) ; do echo -e "Test for: ${colors[$i]}$i ${colors[white]}" ; done
       exit 0
    ;;
    -bridge|-BRIDGE)
       bridgeArgs="$(sed 's/,/ /g' <<<$2)"
       shift
    ;;
     -memory|-MEMORY|-MEM|-mem)
       memoryArgs="$2"
       shift
    ;;
     -huge|-hugepages)
       HUGEPAGES="1"
    ;;
     -usb|-USB)
       usbREGEX="$2"
       shift
    ;;
     -pci|-PCI)
        pciREGEX="$2"
       shift
    ;;
     -run|-RUN)
       DRY="0"
    ;;
     -iso|-ISO)
        iso="$2"
        shift
    ;;
     -bios|-BIOS)
        biosPath="$2"
        shift
    ;;
     -taskset|-TASKSET)
        tasksetThreads="$2"
        taskset="chrt -r 1 taskset -c $tasksetThreads"
        shift
    ;;
     -image|-IMAGE)
        image="$2"
        shift
    ;;
     -imageformat|-format)
        imageFormat="$2"
        shift
    ;;

     --help|-help|--HELP|-HELP)
        printHelp
    ;;
     *) /bin/echo "Unknown argument $1"
        printHelp
    ;;
    esac
    shift
done

# ____                 _____ _ _       _     _   
#|  _ \ _ __ ___      |  ___| (_) __ _| |__ | |_ 
#| |_) | '__/ _ \_____| |_  | | |/ _` | '_ \| __|
#|  __/| | |  __/_____|  _| | | | (_| | | | | |_ 
#|_|   |_|  \___|     |_|   |_|_|\__, |_| |_|\__|
#                                |___/

if isDry
then
  echo -e "${colors[magenta]}This is a DRY run. Please specify ${colors[red]}-run${colors[magenta]} to actually run${colors[white]}"
else
  if [ "$EUID" -ne 0 ]; then echo "This will not be a dry run, please use sudo."; exit 1 ; fi
    # Set a trap to run the cleanup function.
  trap do_cleanup  EXIT HUP INT TERM
fi

  # Check for active IOMMU module.
if [ -z "$(find /sys/class/iommu/ -type l)" ]; then echo -ne "IOMMU isn't loaded?\n  For an Intel machine you must add 'intel_iommu=on' to your kernel boot options in your bootloader.\n  If you're on an AMD machine instead add these two: 'iommu=pt iommu=1'\n\n  If you've already done this and rebooted, your host may not be compatible or some relevant bios settings could be disabled.\n  Feel free to ask about this in case it's a script fault.\n" ; exit 1; fi

  # Determine Host cpu cores/threads and what the guest gets based on -taskset (if specified).
hostThreads=$(grep -Pom1 'siblings.*\ \K([0-9]+)$' /proc/cpuinfo )
  hostCores=$(grep -Pom1 'cpu cores.*\ \K([0-9]+)$' /proc/cpuinfo)
  if [ "$((($hostCores * 2)))" == "$hostThreads" ]; then hostIsThreaded=1; fi

if [ -z "$taskset" ]
then
  guestCores=$hostCores ; if [ ! -z $hostIsThreaded ]; then guestThreads=2; else guestThreads=1; fi
  echo -e "${colors[yellow]}-taskset not specified, guest gets full host CPU:\t${colors[white]} ($hostCores) with ($hostThreads) threads."
else
  if grep -qE '^([0-9]|,)+$' <<< $tasksetThreads
  then
	  echo -e "${colors[green]}-taskset specified. Guest will run on host CPU threads:\t${colors[white]}$tasksetThreads"
    OLDIFS="$IFS" ; IFS=, ; tasksetCount=$(echo $tasksetThreads| wc -w) ; IFS="$OLDIFS"
      # Check if specified -taskset thread count is divisible by 2. Use hyperthreading/smt if supported
    if (( $tasksetCount % 2 == 0 )) && [ "$hostIsThreaded" == "1" ] ; then guestCores=$((( $tasksetCount / 2 ))) ; guestThreads=2; else guestCores=$tasksetCount ; guestThreads=1 ; fi
  else
    echo "This script's -taskset flag only accepts comma delimited threads at the moment such as: 0,1,2,3,4,5,6, or 0,2,4,8 -- Sorry!"
  fi
fi

  # Determine guest memory
if [ -z "$memoryArgs" ]
then
  totalHostMemoryKB=$(grep -oPm1 '(?!=MemTotal\:(\ )+)[0-9]+' /proc/meminfo)
  if [ ! -z "$totalHostMemoryKB" ]
  then
    guestmemoryMB="$((($totalHostMemoryKB / 1024 / 2)))"
    echo -e "${colors[yellow]}-memory argument missing, will use half host total:\t${colors[white]} ${guestmemoryMB} MB${colors[white]}"
  else
    echo "${colors[red]}Failed to find a default memory value for the guest.${colors[white]}"
  fi
else
  if  [[ "$memoryArgs" =~ 'G' ]]; then memoryArgs="$((($(grep -Eo '[0-9]+' <<< $memoryArgs) * 1024 )))"; fi # Convert to MB
  guestmemoryMB=$memoryArgs
fi

  # Eval biosPath
if [[ -z "$biosPath" ]]
then
  defaultBiosPath="/usr/share/ovmf/x64/OVMF_CODE.fd"
  if [[ ! -f "$defaultBiosPath" ]]
  then
    echo -e "${colors[red]}-bios argument missing and couldn't find default '$defaultBiosPath'. Please install OVMF or set your .fd file with the -bios argument"
  else
    echo -e "${colors[green]}-bios argument missing, using discovered default:\t${colors[white]}${defaultBiosPath}"
    biosPath=$defaultBiosPath
  fi
fi

# Eval Hugepages
hugePath="/dev/hugepages"
if [  "$HUGEPAGES" == "1" ] && ! isDry
then
  Hugepagesize="$(grep Hugepagesize /proc/meminfo |grep -oE '[0-9]+')" ; HugepagesizeMB="$((( $Hugepagesize / 1024 )))"
  pagesRequired="$((($((($guestmemoryMB / $HugepagesizeMB))) + 1)))"
  echo -ne "\nHugepages enabled for this run (Pagesize=${HugepagesizeMB}MB, $pagesRequired pages deployed. for the VM's ${guestmemoryMB}MB memory.)\n"
  if grep -q "$hugePath" /proc/mounts
  then
    hugeMount=found && hugeArgs="-mem-path $hugePath"
  else
    echo "/dev/hugepages not mounted, attempting to mount it."
    mount -t hugetlbfs hugetlbfs -o mode=01770,gid=0 $hugePath && hugeMount=self && hugeArgs="-mem-path $hugePath" # So we can umount later
  fi
  echo "$pagesRequired" > /proc/sys/vm/nr_hugepages ; echo -ne "Giving hugepages a moment to allocate...\n" ; sleep 3
  HugePages_Total="$(grep HugePages_Total /proc/meminfo | grep -Eo '[0-9]+')"
  if [[ "$HugePages_Total" -lt "$pagesRequired" ]]; then echo -ne "Error, couldn't allocate all required pages. Please free up memory or check your system.\n\t($HugePages_Total pages allocated out of $pagesRequired. With that the best we can do is: -mem $((($HugePages_Total * HugepagesizeMB))))\n"; exit 1 ; fi
elif isDry
  then
  echo -e "${colors[green]}[DRY] acknowledged -hugepages${colors[white]}"
fi

if [  "$HUGEPAGES" == "1" ] && [ -z "$hugeMount" ] && ! isDry
then
  echo -e "${colors[red]}Unable to find the hugepage mount at $hugePath. Hugepages is not enabled for this run.${colors[white]}"
fi
 
  # Make the bridge
if [[ ! -z "$bridgeArgs" ]]; then bridger start $bridgeArgs ; fi

echo

# Put core QEMU arguments together

  machineArgs="-machine q35,accel=kvm,kernel_irqchip=on" # kernel_irqchip helps prevent PCI Error Code 34 on GPUs.

  cpuArgs="-cpu host,kvm=off"
  smpArgs="-smp sockets=1,cores=$guestCores,threads=$guestThreads"
  coreArgs="$machineArgs -enable-kvm -m $guestmemoryMB $cpuArgs $smpArgs"
  if [ ! -z "$image" ] && [ ! -z "$imageFormat" ]; then image="$image,format=$imageFormat" ; fi
  if [ ! -z "$image" ] ; then coreArgs="$coreArgs -drive file=$image,id=disk" ; else echo -e "${colors[yellow]}You have not specified a disk image with -image, this VM will have no disk this run${colors[white]}\n" ; fi
  coreArgs="$coreArgs -bios $biosPath"
    if [ ! -z $iso  ]  ;then coreArgs="$coreArgs -cdrom $iso" ; fi
    if [[ ! -z "$usbREGEX" ]] && [[ ! -z "$pciREGEX" ]] || [[ -z "$DISPLAY" ]] ; then coreArgs="$coreArgs -nographic -vga none" ; fi # Create X11 window if no passthrough used. Also if $DISPLAY isn't set.

networkArgs="-device virtio-net,netdev=network0"
if [[ ! -z "$bridgeArgs" ]];
then
  networkArgs="$networkArgs -netdev tap,id=network0,ifname=tap0,script=no,downscript=no" #BRIDGE
else
  networkArgs="$networkArgs -netdev user,id=network0" #NAT
fi

  # Remove any leading/trailing pipes from the regex just in case.
if [ ! -z "$usbREGEX" ]; then usbREGEX=$(regexCleanup "$usbREGEX") ; fi
if [ ! -z "$pciREGEX" ]; then pciREGEX=$(regexCleanup "$pciREGEX") ; fi

if [ ! -z "$usbREGEX" ]; then enumerateUSBs ; fi
if [ ! -z "$pciREGEX" ]; then enumeratePCIs unbind vfiobind ; fi

# _____ _
#|  ___| |_   _
#| |_  | | | | |
#|  _| | | |_| |
#|_|   |_|\__, |
#         |___/

if isDry;
then
  echo "---------------------"
  echo "Here are the completed args from this DRY run:"
  echo -e "Core:\n${colors[blue]} $coreArgs $hugeArgs${colors[white]}"
  echo -e "Net :\n${colors[blue]} $networkArgs${colors[white]}"
  echo -e "USB :\n${colors[blue]} $usbArgs${colors[white]}"
  echo -e "PCI :\n${colors[blue]}$pciArgs${colors[white]}"
  if [ ! -z "$taskset" ]; then echo -e "Taskset params to invoke qemu: ${colors[blue]}$taskset${colors[white]}"; fi
  echo -ne "\nRun the script with the same arguments again and include ${colors[red]}-run${colors[white]} to actually pass these to qemu-system-x86_64\n"
  exit 0
else
  echo -ne "Starting qemu now.\n\n"
  $taskset qemu-system-x86_64 $coreArgs $hugeArgs $networkArgs $usbArgs $pciArgs
fi


#Cleanup will catch on Exit
